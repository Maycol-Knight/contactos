---
import Layout from '../layouts/Layout.astro';
import ContenedorApp from '../components/ContenedorApp.astro';
import BarraBusqueda from '../components/BarraBusqueda.astro';
import ListaContactos from '../components/ListaContactos.astro';
import FormularioContacto from '../components/FormularioContacto.astro';
import NotificacionToast from '../components/NotificacionToast.astro';
import ConfirmacionModal from '../components/ConfirmacionModal.astro';
---
<Layout>
    <ContenedorApp>
        <!--
          Contenedor de la "pantalla" del móvil. Es RELATIVO para que
          los modales se posicionen correctamente dentro de él.
        -->
           <!-- Contenedor simulando pantalla completa con barras de navegación -->
        <div class="w-full aspect-[9/19] max-h-[750px] bg-black rounded-[1.75rem] overflow-hidden relative">
            
            <!-- PANTALLA MÓVIL -->
            <div id="pantalla-movil" class="w-full h-[calc(100%-56px)] bg-gradient-to-b from-gray-900 via-black to-gray-900 text-white rounded-t-[1.75rem] flex flex-col overflow-hidden relative">
                
                <!-- CÁMARA FRONTAL Y SENSORES -->
                <div class="absolute top-4 left-1/2 transform -translate-x-1/2 z-50 flex items-center space-x-3">
                    <!-- Altavoz -->
                    <div class="w-8 h-1 bg-gray-700 rounded-full"></div>
                    
                    <!-- Cámara frontal -->
                    <div class="w-3 h-3 bg-gray-800 rounded-full border border-gray-600 flex items-center justify-center shadow-inner">
                        <div class="w-2 h-2 bg-gray-900 rounded-full flex items-center justify-center">
                            <div class="w-1 h-1 bg-blue-500/30 rounded-full"></div>
                        </div>
                    </div>
                    
                    <!-- Sensor de proximidad -->
                    <div class="w-1 h-1 bg-red-900/50 rounded-full"></div>
                </div>
                
                <!-- Efecto de reflejo superior -->
                <div class="absolute top-0 left-0 right-0 h-24 bg-gradient-to-b from-white/5 to-transparent rounded-t-[1.75rem] pointer-events-none"></div>
            
            <!-- HEADER -->
            <header class="flex-shrink-0 pt-12 pb-2 bg-gradient-to-b from-gray-900 to-transparent">
                <div class="px-4">
                    <h1 class="text-3xl font-bold bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent">Contactos</h1>
                    <div class="flex items-center mt-1">
                        <div class="w-1.5 h-1.5 bg-green-400 rounded-full mr-2 animate-pulse"></div>
                        <p id="contador-contactos" class="text-gray-400 text-xs font-medium">3 contactos</p>
                    </div>
                </div>
                
                <!-- BARRA DE BÚSQUEDA -->
                <div class="mt-3 px-4">
                    <BarraBusqueda />
                </div>
            </header>

            <!-- VISTA LISTA -->
            <main id="vista-lista" class="flex-grow overflow-y-auto mt-2 pb-14 scrollbar-hide">
                <ListaContactos />
            </main>

            <!-- VISTA FORMULARIO -->
            <div id="vista-formulario" class="hidden h-full">
                <FormularioContacto />
            </div>

            <!-- BOTÓN FLOTANTE -->
            <button id="boton-agregar" class="absolute bottom-20 right-4 bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white rounded-full w-14 h-14 flex items-center justify-center shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110 z-10">
                <i class="fa-solid fa-plus text-xl"></i>
                <div class="absolute inset-0 bg-gradient-to-r from-blue-400 to-blue-500 rounded-full opacity-0 hover:opacity-20 transition-opacity duration-300"></div>
            </button>

            <!-- BARRA DE NAVEGACIÓN INFERIOR -->
            <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-gray-900 via-gray-800 to-gray-900 border-t border-gray-600 backdrop-blur-sm z-20">
                <div class="flex justify-around items-center px-1 py-1">
                    <!-- Favoritos -->
                    <button class="nav-item flex flex-col items-center py-2 px-3 text-gray-400 hover:text-yellow-400 transition-all duration-300 hover:scale-105 rounded-lg hover:bg-gray-700/50">
                        <div class="relative">
                            <i class="fas fa-star text-sm mb-1"></i>
                        </div>
                        <span class="text-xs font-medium">Favoritos</span>
                    </button>
                    
                    <!-- Contactos (Activo) -->
                    <button class="nav-item flex flex-col items-center py-2 px-3 text-blue-400 transition-all duration-300 scale-105 rounded-lg bg-blue-500/20 border border-blue-500/30">
                        <div class="relative">
                            <i class="fas fa-address-book text-sm mb-1"></i>
                            <div class="absolute -top-1 -right-1 w-1.5 h-1.5 bg-blue-400 rounded-full animate-pulse"></div>
                        </div>
                        <span class="text-xs font-semibold">Contactos</span>
                    </button>
                    
                    <!-- Teléfono -->
                    <button class="nav-item flex flex-col items-center py-2 px-3 text-gray-400 hover:text-green-400 transition-all duration-300 hover:scale-105 rounded-lg hover:bg-gray-700/50">
                        <div class="relative">
                            <i class="fas fa-phone text-sm mb-1"></i>
                        </div>
                        <span class="text-xs font-medium">Teléfono</span>
                    </button>
                </div>
            </div>

            <!-- COMPONENTES DE UI -->
            <NotificacionToast />
            <ConfirmacionModal />
        </div>

        <!-- BARRA DE NAVEGACIÓN SISTEMA ANDROID -->
        <div class="absolute bottom-0 left-0 right-0 bg-black/90 backdrop-blur-md rounded-b-[1.75rem]">
            <div class="flex justify-center items-center py-3 px-6">
                <!-- Botón Atrás -->
                <button class="android-nav-btn p-2 mx-6 text-white/70 hover:text-white transition-all duration-200 hover:bg-white/10 rounded-full">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M19 12H5M12 19l-7-7 7-7"/>
                    </svg>
                </button>
                
                <!-- Botón Inicio (Círculo) -->
                <button class="android-nav-btn p-2 mx-6 text-white/70 hover:text-white transition-all duration-200 hover:bg-white/10 rounded-full">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <circle cx="12" cy="12" r="10"/>
                    </svg>
                </button>
                
                <!-- Botón Recientes (Cuadrado) -->
                <button class="android-nav-btn p-2 mx-6 text-white/70 hover:text-white transition-all duration-200 hover:bg-white/10 rounded-full">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <rect x="3" y="3" width="18" height="18" rx="2" ry="2"/>
                    </svg>
                </button>
            </div>
        </div>
    </div>
        
    </ContenedorApp>
</Layout>

<script is:inline>
    // --- ESTADO Y LÓGICA DEL ORQUESTADOR ---
    let contactos = [
        { id: '1', nombre: 'Ana Torres', telefono: '987654321', email: 'ana.tarazona.cutipa@example.com' },
        { id: '2', nombre: 'Luis Morales', telefono: '912345678', email: 'luis.m@example.com' },
        { id: '3', nombre: 'Carla Diaz', telefono: '998877665', email: 'carla.d@example.com' },
        { id: '4', nombre: 'Pedro Gutierrez', telefono: '123456789', email: 'pedro.g@example.com' },
        { id: '5', nombre: 'Sofia Ramirez', telefono: '456789123', email: 'sofia.r@example.com' },
        { id: '6', nombre: 'Javier Lopez', telefono: '321654987', email: 'javier.l@example.com' },
        { id: '7', nombre: 'Lucia Fernandez', telefono: '789123456', email: 'lucia.f@example.com' }
    ];
    let idParaEliminar = null; // Variable temporal para confirmar eliminación

    // Seleccionamos los elementos que se van a ocultar/mostrar
    const vistaLista = document.getElementById('vista-lista');
    const vistaFormulario = document.getElementById('vista-formulario');
    const botonAgregar = document.getElementById('boton-agregar');
    const headerPrincipal = document.querySelector('header');

    // Función para alternar entre vista lista y formulario
    function cambiarVista(vistaAMostrar) {
        if (vistaAMostrar === 'formulario') {
            // Ocultar elementos de la lista
            vistaLista.classList.add('hidden');
            botonAgregar.classList.add('hidden');
            headerPrincipal.classList.add('hidden'); // Más espacio para el formulario
            
            // Mostrar formulario
            vistaFormulario.classList.remove('hidden');
        } else { // Volviendo a la lista
            // Ocultar formulario
            vistaFormulario.classList.add('hidden');
            
            // Mostrar elementos de la lista
            vistaLista.classList.remove('hidden');
            botonAgregar.classList.remove('hidden');
            headerPrincipal.classList.remove('hidden');
        }
    }
    
    // Función central para actualizar la vista con nueva lista de contactos
    function actualizarYRenderizar(listaAFiltrar = contactos) {
        // Envía evento al componente ListaContactos para que se re-renderice
        document.dispatchEvent(new CustomEvent('actualizar-lista', { detail: { contactos: listaAFiltrar } }));
    }

    // INICIALIZACIÓN: Renderiza la lista cuando carga la página
    document.addEventListener('DOMContentLoaded', () => {
        actualizarYRenderizar(); // Muestra todos los contactos inicialmente
    });

    // GUARDAR/ACTUALIZAR CONTACTO: Maneja tanto creación como edición
    document.addEventListener('guardar-contacto', (evento) => {
        const contactoRecibido = evento.detail; // Datos del formulario
        
        // Busca si ya existe el contacto (para edición)
        const indice = contactos.findIndex(c => c.id === contactoRecibido.id);
        
        if (indice !== -1) {
            // EDICIÓN: Reemplaza el contacto existente
            contactos[indice] = contactoRecibido;
            document.dispatchEvent(new CustomEvent('mostrar-notificacion', { 
                detail: { mensaje: 'Contacto actualizado.', tipo: 'exito' } 
            }));
        } else {
            // CREACIÓN: Añade nuevo contacto al inicio del array
            contactos.unshift(contactoRecibido);
            document.dispatchEvent(new CustomEvent('mostrar-notificacion', { 
                detail: { mensaje: 'Contacto guardado.', tipo: 'exito' } 
            }));
        }
        
        actualizarYRenderizar(); // Actualiza la vista con los cambios
        cambiarVista('lista');   // Regresa automáticamente a la lista
    });

    // EDITAR CONTACTO: Carga datos en formulario y cambia vista
    document.addEventListener('solicitar-edicion', (evento) => {
        // Busca el contacto por ID
        const contacto = contactos.find(c => c.id === evento.detail.id);
        
        if (contacto) {
            // Envía los datos al formulario para pre-cargar campos
            document.dispatchEvent(new CustomEvent('cargar-datos-formulario', { detail: contacto }));
            cambiarVista('formulario'); // Cambia a vista de edición
        }
    });

    // SOLICITAR ELIMINACIÓN: Prepara eliminación pero espera confirmación
    document.addEventListener('solicitar-eliminacion', (evento) => {
        // Guarda ID temporalmente (no elimina aún)
        idParaEliminar = evento.detail.id;
        
        // Muestra modal de confirmación
        document.dispatchEvent(new CustomEvent('mostrar-confirmacion-eliminar'));
    });

    // CONFIRMAR ELIMINACIÓN: Elimina definitivamente después de confirmación
    document.addEventListener('confirmar-eliminacion-final', () => {
        if (idParaEliminar) {
            // Elimina del array usando filter (excluye el ID)
            contactos = contactos.filter(c => c.id !== idParaEliminar);
            
            actualizarYRenderizar(); // Actualiza vista sin el contacto eliminado
            
            // Muestra notificación de confirmación
            document.dispatchEvent(new CustomEvent('mostrar-notificacion', { 
                detail: { mensaje: 'Contacto eliminado.', tipo: 'info' } 
            }));
            
            idParaEliminar = null; // Limpia la variable temporal
        }
    });

    // FILTRAR CONTACTOS: Búsqueda en tiempo real por múltiples campos
    document.addEventListener('filtrar-contactos', (evento) => {
        const termino = evento.detail.termino.toLowerCase(); // Insensible a mayúsculas
        
        // Filtra por nombre, teléfono Y email usando OR lógico
        const contactosFiltrados = contactos.filter(c => 
            c.nombre.toLowerCase().includes(termino) ||
            c.telefono.toLowerCase().includes(termino) ||
            c.email.toLowerCase().includes(termino)
        );
        
        // Renderiza solo los resultados que coinciden
        actualizarYRenderizar(contactosFiltrados);
    });

    // BOTÓN AGREGAR: Abre formulario limpio para nuevo contacto
    botonAgregar.addEventListener('click', () => {
        // Limpia campos del formulario
        document.dispatchEvent(new CustomEvent('limpiar-formulario'));
        cambiarVista('formulario'); // Cambia a vista de creación
    });

    // CANCELAR OPERACIÓN: Regresa a lista sin guardar cambios
    document.addEventListener('operacion-cancelada', () => {
        cambiarVista('lista'); // Navegación simple de regreso
    });
</script>